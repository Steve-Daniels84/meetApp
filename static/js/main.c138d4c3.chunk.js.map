{"version":3,"sources":["components/Event.js","components/EventList.js","components/city-search.js","components/NumberOfEvents.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","_ref","_event$start","_event$end","event","showDetails","setShowDetails","useState","React","createElement","summary","start","dateTime","end","location","onClick","role","className","description","Fragment","EventList","events","index","id","map","key","CitySearch","allLocations","setCurrentCity","showSuggestions","setShowSuggestions","query","setQuery","suggestions","setSuggestions","useEffect","length","JSON","stringify","handleItemClicked","value","target","textContent","type","placeholder","onFocus","onChange","filteredLocations","filter","toUpperCase","indexOf","suggestion","NumberOfEvents","setCurrentNOE","setErrorAlert","number","setNumber","htmlFor","e","isNaN","getEvents","async","token","getToken","console","log","removeQuery","newurl","window","history","pushState","pathname","protocol","host","url","response","fetch","result","json","encodeCode","encodeURIComponent","code","getUrl","ok","Error","status","access_token","localStorage","setItem","error","App","setEvents","currentNOE","setAllLocations","currentCity","fetchData","allEvents","filteredEvents","slice","extractedLocations","Set","extractLocations","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c138d4c3.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\nconst Event = ({event}) => {\n    const [showDetails, setShowDetails] = useState(false);\n    return (\n        <li>\n            <p>{event.summary}</p>\n           \n            <p>{event.start?.dateTime}</p>\n            <p>{event.end?.dateTime}</p>\n            <p>{event.location}</p>\n            <button onClick={()=>setShowDetails(!showDetails)}>\n                { showDetails ? \"Hide details\" : \"Show details\"}\n            </button>\n            {\n                showDetails ?  <p role=\"description\" className=\"details\">{event.description}</p> : <></>\n            }\n        </li>\n    );\n  }\n  \n  export default Event;","import React from \"react\";\nimport Event from \"./Event\";\n\nconst EventList = ({events, index}) => {\n    return (\n        <ul id=\"event-list\">\n              {events? events.map(event => <Event key={event.id} event={event} />) : null}\n        </ul>\n    );\n  }\n  \n  export default EventList;","import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nconst CitySearch = ({allLocations, setCurrentCity}) => {\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    const [query, setQuery] = useState(\"\");\n    const [suggestions, setSuggestions] = useState([]);\n\n    useEffect(() => {\n      if (allLocations.length > 0) {\n        setSuggestions(allLocations);\n      }\n    }, [JSON.stringify(allLocations)]);\n\n    const handleInputchanged = (event) => {\n      const value = event.target.value;\n      const filteredLocations = allLocations ? allLocations.filter((location) => {\n        return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n      }) : [];\n  \n      setQuery(value);\n      setSuggestions(filteredLocations);\n    }\n\n    const handleItemClicked = (event) => {\n        const value = event.target.textContent;\n        setQuery(value);\n        setShowSuggestions(false);\n        setCurrentCity(value);\n    }\n    return (\n      <div id=\"city-search\">\n        <input\n            type=\"text\"\n            className=\"city\"\n            placeholder=\"Search for a city\"\n            value={query}\n            onFocus={() => setShowSuggestions(true)}\n            onChange={handleInputchanged}\n        />\n       {showSuggestions ?\n        <ul className=\"suggestions\" >\n          {suggestions.map((suggestion) => {\n            return <li key={suggestion} onClick={handleItemClicked} id={suggestion}>{suggestion}</li>\n          })}\n          <li key='See all cities'>\n            <b>See all cities</b>\n          </li>\n        </ul>\n        : null\n      }\n      </div>\n    )\n  }\n\nexport default CitySearch;","import React from \"react\";\nimport { useState } from \"react\";\n\nconst NumberOfEvents = ({ setCurrentNOE, setErrorAlert }) => {\n  const [number, setNumber] = useState(32);\n\n  const handleInputChanged = (e) => {\n    let value = e.target.value;\n    if (isNaN(value) || value.length <= 0) {\n      setErrorAlert(\"Please enter a valid number\");\n    } else {\n      setErrorAlert(\"\"); // Clear error message if input is valid\n      setNumber(value);\n      setCurrentNOE(value);\n    }\n  };\n\n  return (\n    <div id=\"numberOfEvents\">\n      <label htmlFor=\"number\" id=\"number\">\n        Number of Events:\n        <input\n          type=\"text\"\n          className=\"number\"\n          value={number}\n          onChange={handleInputChanged}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default NumberOfEvents;","import mockData from \"./mock-data\";\n\n//takes events data and processes it for further use\nexport const extractLocations = (events) => {\n  const extractedLocations = events.map((event) => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\nexport const checkToken = async (accessToken) => {\n  const response = await fetch(\n    \"https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}\"\n  );\n  const result = await response.json();\n  return result;\n};\n\nexport const removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n//fetches all events data\nexport const getEvents = async () => {\n//   if (window.location.href.startsWith(\"http://localhost\")) {\n//     return mockData;\n//   }\n\n  const token = await getToken();\n\n  console.log(token)\n\n  if (token) {\n    removeQuery();\n    const url =\n      \"https://go95ldn5h7.execute-api.eu-west-2.amazonaws.com/dev/api/getCalendarEvents\" +\n      \"/\" +\n      token;\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      return result.events;\n    } else return null;\n  }\n};\n\n\nconst getToken = async (code) => {\n    try {\n      const encodeCode = encodeURIComponent(code);\n   \n      const url = \"https://go95ldn5h7.execute-api.eu-west-2.amazonaws.com/dev/api/get-auth-url\";\n      // eslint-disable-next-line no-useless-concat\n  \n      const getUrl = `${url}` + \"/\" + `${encodeCode}`;\n      const response = await fetch(getUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      const { access_token } = await response.json();\n      access_token && localStorage.setItem(\"access_token\", access_token);\n      return access_token;\n    } catch (error) {\n      return error;\n    }\n  }; ","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport EventList from './components/EventList';\nimport CitySearch from './components/city-search';\nimport NumberOfEvents from './components/NumberOfEvents';\nimport {extractLocations,getEvents} from '../src/api';\n\nconst App = () => {\n  const [events, setEvents] = useState([]);\n  const [currentNOE, setCurrentNOE] = useState(25);\n  const [allLocations, setAllLocations] = useState([]);\n  const [currentCity, setCurrentCity] = useState(\"See all cities\");\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const allEvents = await getEvents();\n    const filteredEvents = currentCity === \"See all cities\" ?\n      allEvents :\n      allEvents.filter(event => event.location === currentCity)\n    setEvents(filteredEvents.slice(0, currentNOE));\n    setAllLocations(extractLocations(allEvents));\n  }\n\n  return (\n    <div className=\"App\">\n      <CitySearch allLocations={allLocations} setCurrentCity={setCurrentCity}/>\n      <NumberOfEvents setCurrentNOE={setCurrentNOE}/> \n      <EventList events={events}/>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}